version: '3'

# TruthGraph Task Runner
# Requires: go-task (https://taskfile.dev)
# Install: winget install Task.Task

vars:
  PYTHON: python
  PYMARKDOWNLNT: pymarkdownlnt.exe
  RUFF: ruff

tasks:
  # ============================================================================
  # Linting Tasks
  # ============================================================================

  lint:
    desc: Run all linters (pymarkdownlnt + ruff)
    cmds:
      - task: lint:markdown
      - task: lint:python

  lint:markdown:
    desc: Lint Markdown files with pymarkdownlnt (excluding .claude/)
    cmds:
      - powershell -NoProfile -ExecutionPolicy Bypass -File scripts/lint-markdown.ps1
    sources:
      - '**/*.md'

  lint:python:
    desc: Lint Python code with ruff
    cmds:
      - '{{.RUFF}} check'
    sources:
      - '**/*.py'
      - pyproject.toml

  lint:fix:
    desc: Auto-fix all linting issues (pymarkdownlnt + ruff)
    cmds:
      - task: lint:fix:markdown
      - task: lint:fix:python

  lint:fix:markdown:
    desc: Auto-fix Markdown linting issues with pymarkdownlnt (excluding .claude/)
    cmds:
      - powershell -NoProfile -ExecutionPolicy Bypass -File scripts/lint-markdown-fix.ps1
    sources:
      - '**/*.md'

  lint:fix:python:
    desc: Auto-fix Python linting issues with ruff
    cmds:
      - '{{.RUFF}} check --fix'
      - '{{.RUFF}} format'
    sources:
      - '**/*.py'
      - pyproject.toml

  # ============================================================================
  # Docker Development Tasks
  # ============================================================================

  setup:
    desc: Setup development environment (create .env, build containers)
    cmds:
      - cmd: powershell -Command "if (!(Test-Path .env)) { Copy-Item .env.example .env }"
        platforms: [windows]
      - cmd: test -f .env || cp .env.example .env
        platforms: [linux, darwin]
      - docker-compose build
      - echo "✓ Setup complete! Run task dev to start services"

  dev:
    desc: Start development environment (htmx frontend only)
    cmds:
      - docker-compose up -d postgres api frontend
      - echo "✓ Services starting..."
      - echo "  PostgreSQL at localhost:5432"
      - echo "  API at http://localhost:8000"
      - echo "  Frontend (htmx) at http://localhost:5000"
      - echo "  API Docs at http://localhost:8000/docs"
      - echo "Run task logs to view logs"

  dev:react:
    desc: Start development environment with React frontend
    cmds:
      - docker-compose --profile react up -d
      - echo "✓ Services starting..."
      - echo "  PostgreSQL at localhost:5432"
      - echo "  API at http://localhost:8000"
      - echo "  Frontend (htmx) at http://localhost:5000"
      - echo "  Frontend (React) at http://localhost:5173"
      - echo "  API Docs at http://localhost:8000/docs"

  down:
    desc: Stop and remove containers
    cmds:
      - docker-compose down
      - echo "✓ Services stopped"

  restart:
    desc: Restart all services
    cmds:
      - task: down
      - task: dev

  reset:
    desc: Reset everything (destructive - removes volumes)
    cmds:
      - docker-compose down -v
      - cmd: powershell -Command "if (Test-Path .volumes) { Remove-Item -Recurse -Force .volumes }"
        platforms: [windows]
        ignore_error: true
      - cmd: rm -rf .volumes
        platforms: [linux, darwin]
        ignore_error: true
      - echo "✓ Reset complete. Run task setup to start fresh"

  logs:
    desc: View logs from all services
    cmds:
      - docker-compose logs -f

  logs:api:
    desc: View API logs only
    cmds:
      - docker-compose logs -f api

  logs:db:
    desc: View database logs only
    cmds:
      - docker-compose logs -f postgres

  shell:
    desc: Open shell in API container
    cmds:
      - docker-compose exec api bash

  shell:db:
    desc: Open PostgreSQL shell
    cmds:
      - docker-compose exec postgres psql -U truthgraph -d truthgraph

  db:migrate:
    desc: Run database migrations (placeholder for Phase 2)
    cmds:
      - echo "Database migrations will be added in Phase 2"

  test:api:
    desc: Run API tests (placeholder for Phase 2)
    cmds:
      - echo "API tests will be added in Phase 2"
      - echo "docker-compose exec api pytest tests/"

  # ============================================================================
  # Helper Tasks
  # ============================================================================

  check:
    desc: Run all checks (lint + type check + tests)
    cmds:
      - task: lint
      - echo "✓ All checks passed!"

  format:
    desc: Format all code (Python with ruff, Markdown with pymarkdownlnt fix)
    cmds:
      - task: lint:fix

  clean:
    desc: Clean up generated files and caches
    cmds:
      - rm -rf __pycache__
      - rm -rf .pytest_cache
      - rm -rf .ruff_cache
      - rm -rf .mypy_cache
      - rm -rf dist
      - rm -rf build
      - rm -rf *.egg-info
      - echo "✓ Cleaned up caches and build artifacts"

  help:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  # ============================================================================
  # Default Task
  # ============================================================================

  default:
    desc: Show help (default task when running 'task' with no arguments)
    cmds:
      - task: help
    silent: true
