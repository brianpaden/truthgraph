version: '3'

# TruthGraph Task Runner
# Requires: go-task (https://taskfile.dev)
# Install: winget install Task.Task

vars:
  PYTHON: python
  UV: uv
  # Use uv to run tools from the dev environment
  PYMARKDOWNLNT: uv run pymarkdownlnt
  RUFF: uv run ruff
  PYTEST: uv run pytest
  PYMD_FLAGS: -d md013,md022,md031,md032,md036,md058
  PYMD_DIRS: ['alembic','archive','backend','data','docker','docs','examples','frontend','frontend-react','planning','scripts','tests','truthgraph']

tasks:
  # ============================================================================
  # Environment Setup
  # ============================================================================

  install:
    desc: Install project with dev dependencies using uv
    cmds:
      - '{{.UV}} sync --extra dev --extra ml'
      - echo "✓ Dependencies installed in .venv"

  # ============================================================================
  # Linting Tasks
  # ============================================================================

  lint:
    desc: Run all linters (pymarkdownlnt + ruff)
    cmds:
      - task: lint:markdown
      - task: lint:python

  lint:markdown:
    desc: Lint Markdown files with pymarkdownlnt (excluding .claude/)
    cmds:
      - '{{.PYMARKDOWNLNT}} {{.PYMD_FLAGS}} scan .'
      - for:
          var: PYMD_DIRS
        cmd: '{{.PYMARKDOWNLNT}} {{.PYMD_FLAGS}} scan -r {{.ITEM}}'
    sources:
      - '**/*.md'

  lint:python:
    desc: Lint Python code with ruff
    cmds:
      - '{{.RUFF}} check'
    sources:
      - '**/*.py'
      - pyproject.toml

  lint:fix:
    desc: Auto-fix all linting issues (pymarkdownlnt + ruff)
    cmds:
      - task: lint:fix:markdown
      - task: lint:fix:python

  lint:fix:markdown:
    desc: Auto-fix Markdown linting issues with pymarkdownlnt (excluding .claude/)
    cmds:
      - '{{.PYMARKDOWNLNT}} {{.PYMD_FLAGS}} fix .'
      - for:
          var: PYMD_DIRS
        cmd: '{{.PYMARKDOWNLNT}} {{.PYMD_FLAGS}} fix -r {{.ITEM}}'
    sources:
      - '**/*.md'

  lint:fix:python:
    desc: Auto-fix Python linting issues with ruff
    cmds:
      - '{{.RUFF}} format'
      - '{{.RUFF}} check --fix'
    sources:
      - '**/*.py'
      - pyproject.toml

  # ============================================================================
  # Docker Development Tasks
  # ============================================================================

  setup:
    desc: Setup development environment (create .env, build containers)
    cmds:
      - cmd: powershell -Command "if (!(Test-Path .env)) { Copy-Item .env.example .env }"
        platforms: [windows]
      - cmd: test -f .env || cp .env.example .env
        platforms: [linux, darwin]
      - docker-compose build
      - echo "✓ Setup complete! Run task dev to start services"

  dev:
    desc: Start development environment (htmx frontend only)
    cmds:
      - docker-compose up -d postgres api frontend
      - echo "✓ Services starting..."
      - echo "  PostgreSQL at localhost:5432"
      - echo "  API at http://localhost:8000"
      - echo "  Frontend (htmx) at http://localhost:5000"
      - echo "  API Docs at http://localhost:8000/docs"
      - echo "Run task logs to view logs"

  dev:react:
    desc: Start development environment with React frontend
    cmds:
      - docker-compose --profile react up -d
      - echo "✓ Services starting..."
      - echo "  PostgreSQL at localhost:5432"
      - echo "  API at http://localhost:8000"
      - echo "  Frontend (htmx) at http://localhost:5000"
      - echo "  Frontend (React) at http://localhost:5173"
      - echo "  API Docs at http://localhost:8000/docs"

  down:
    desc: Stop and remove containers
    cmds:
      - docker-compose down
      - echo "✓ Services stopped"

  restart:
    desc: Restart all services
    cmds:
      - task: down
      - task: dev

  reset:
    desc: Reset everything (destructive - removes volumes)
    cmds:
      - docker-compose down -v
      - cmd: powershell -Command "if (Test-Path .volumes) { Remove-Item -Recurse -Force .volumes }"
        platforms: [windows]
        ignore_error: true
      - cmd: rm -rf .volumes
        platforms: [linux, darwin]
        ignore_error: true
      - echo "✓ Reset complete. Run task setup to start fresh"

  logs:
    desc: View logs from all services
    cmds:
      - docker-compose logs -f

  logs:api:
    desc: View API logs only
    cmds:
      - docker-compose logs -f api

  logs:db:
    desc: View database logs only
    cmds:
      - docker-compose logs -f postgres

  shell:
    desc: Open shell in API container
    cmds:
      - docker-compose exec api bash

  shell:db:
    desc: Open PostgreSQL shell
    cmds:
      - docker-compose exec postgres psql -U truthgraph -d truthgraph

  # ============================================================================
  # Database Tasks
  # ============================================================================

  db:migrate:
    desc: Run database migrations (Alembic)
    cmds:
      - docker-compose exec api alembic upgrade head
      - echo "✓ Database migrations applied"

  db:migrate:down:
    desc: Rollback last database migration
    cmds:
      - docker-compose exec api alembic downgrade -1
      - echo "✓ Last migration rolled back"

  db:migrate:status:
    desc: Show current migration status
    cmds:
      - docker-compose exec api alembic current

  db:migrate:history:
    desc: Show migration history
    cmds:
      - docker-compose exec api alembic history

  db:migrate:create:
    desc: Create a new migration (MIGRATION_NAME required)
    cmds:
      - docker-compose exec api alembic revision --autogenerate -m "{{.MIGRATION_NAME}}"

  # ============================================================================
  # Testing Tasks
  # ============================================================================

  test:
    desc: Run all tests
    cmds:
      - task: test:unit
      - task: test:integration

  test:unit:
    desc: Run unit tests only
    cmds:
      - docker-compose exec api pytest tests/unit tests/services -v -m "not integration"

  test:integration:
    desc: Run integration tests only
    cmds:
      - docker-compose exec api pytest tests/integration -v

  test:ml:
    desc: Run ML service tests (embedding, NLI, vector search)
    cmds:
      - docker-compose exec api pytest tests/services/ml tests/integration/test_*_integration.py -v

  test:api:
    desc: Run API endpoint tests
    cmds:
      - docker-compose exec api pytest tests/test_api_ml_endpoints.py -v

  test:hybrid:
    desc: Run hybrid search tests
    cmds:
      - docker-compose exec api pytest tests/unit/services/test_hybrid_search_service.py tests/integration/test_hybrid_search_integration.py -v

  test:verdict:
    desc: Run verdict aggregation tests
    cmds:
      - docker-compose exec api pytest tests/services/ml/test_verdict_aggregation_service.py tests/services/ml/test_verdict_aggregation_integration.py -v

  test:pipeline:
    desc: Run verification pipeline tests
    cmds:
      - docker-compose exec api pytest tests/unit/services/test_verification_pipeline_service.py tests/integration/test_verification_pipeline_integration.py -v

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - docker-compose exec api pytest --cov=truthgraph --cov-report=html --cov-report=term

  # ============================================================================
  # ML Service Tasks
  # ============================================================================

  ml:warmup:
    desc: Warmup ML models (download and cache)
    cmds:
      - docker-compose exec api python -c "from truthgraph.services.ml.model_cache import ModelCache; ModelCache.get_instance().warmup_all_models()"
      - echo "✓ ML models warmed up and cached"

  ml:benchmark:
    desc: Run all ML performance benchmarks
    cmds:
      - task: ml:benchmark:embedding
      - task: ml:benchmark:nli
      - task: ml:benchmark:vector
      - task: ml:benchmark:hybrid
      - task: ml:benchmark:verdict
      - task: ml:benchmark:pipeline

  ml:benchmark:embedding:
    desc: Benchmark embedding service
    cmds:
      - docker-compose exec api python scripts/benchmark_embeddings.py

  ml:benchmark:nli:
    desc: Benchmark NLI service
    cmds:
      - docker-compose exec api python scripts/benchmark_nli.py

  ml:benchmark:vector:
    desc: Benchmark vector search
    cmds:
      - docker-compose exec api python scripts/benchmark_vector_search.py

  ml:benchmark:hybrid:
    desc: Benchmark hybrid search (vector + keyword)
    cmds:
      - docker-compose exec api python -m pytest tests/benchmarks/test_hybrid_search_performance.py -v

  ml:benchmark:verdict:
    desc: Benchmark verdict aggregation
    cmds:
      - docker-compose exec api python scripts/benchmark_verdict_aggregation.py

  ml:benchmark:pipeline:
    desc: Benchmark verification pipeline (end-to-end)
    cmds:
      - docker-compose exec api python scripts/benchmark_verification_pipeline.py

  ml:benchmark:e2e:
    desc: Benchmark end-to-end pipeline (alias for ml:benchmark:pipeline)
    cmds:
      - task: ml:benchmark:pipeline

  ml:profile:
    desc: Profile ML services for bottlenecks
    cmds:
      - docker-compose exec api python scripts/profile_ml_services.py

  ml:optimize:
    desc: Optimize batch sizes for current hardware
    cmds:
      - docker-compose exec api python scripts/optimize_batch_sizes.py

  # ============================================================================
  # API & Service Tasks
  # ============================================================================

  api:verify:
    desc: Test claim verification via API (example)
    cmds:
      - |
        curl -X POST http://localhost:8000/api/v1/verify \
          -H "Content-Type: application/json" \
          -d '{"claim": "The Earth orbits around the Sun", "tenant_id": "default", "max_evidence": 10}'

  api:health:
    desc: Check API health status
    cmds:
      - curl http://localhost:8000/health

  api:docs:
    desc: Open API documentation in browser
    cmds:
      - cmd: start http://localhost:8000/docs
        platforms: [windows]
      - cmd: open http://localhost:8000/docs
        platforms: [darwin]
      - cmd: xdg-open http://localhost:8000/docs
        platforms: [linux]

  # ============================================================================
  # GPU Support Tasks
  # ============================================================================

  dev:gpu:
    desc: Start development environment with GPU support
    cmds:
      - docker-compose -f docker-compose.yml -f docker-compose.gpu.yml up -d
      - echo "✓ Services starting with GPU support..."
      - echo "  PostgreSQL at localhost:5432"
      - echo "  API at http://localhost:8000"
      - echo "  API Docs at http://localhost:8000/docs"
      - echo "  GPU acceleration enabled for ML models"

  gpu:check:
    desc: Check GPU availability in container
    cmds:
      - docker-compose exec api python -c "import torch; print('CUDA available:', torch.cuda.is_available()); print('Device:', torch.cuda.get_device_name(0) if torch.cuda.is_available() else 'CPU')"

  # ============================================================================
  # Helper Tasks
  # ============================================================================

  check:
    desc: Run all checks (lint + type check + tests)
    cmds:
      - task: lint
      - echo "✓ All checks passed!"

  format:
    desc: Format all code (Python with ruff, Markdown with pymarkdownlnt fix)
    cmds:
      - task: lint:fix

  clean:
    desc: Clean up generated files and caches
    cmds:
      - rm -rf __pycache__
      - rm -rf .pytest_cache
      - rm -rf .ruff_cache
      - rm -rf .mypy_cache
      - rm -rf dist
      - rm -rf build
      - rm -rf *.egg-info
      - echo "✓ Cleaned up caches and build artifacts"

  help:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  # ============================================================================
  # Default Task
  # ============================================================================

  default:
    desc: Show help (default task when running 'task' with no arguments)
    cmds:
      - task: help
    silent: true
